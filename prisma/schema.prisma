generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Problem {
  id              Int          @id @default(autoincrement())
  title           String
  slug            String       @unique
  description     String       @db.Text
  difficulty      Difficulty
  acceptanceRate  Float        @default(0.0)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  isSolved        Boolean      @default(false)
  starterCodes    StarterCode[]
  testCases       TestCase[]
  submissions     Submission[]
  tags            ProblemTag[]
  discussions     Discussion[]
  solutions       Solution[]
  examples        Examples[]
  constraints     Constraint[]
}

model StarterCode {
  id        Int      @id @default(autoincrement())
  language  Language
  code      String   @db.Text @default("// Start your code here")
  wrapper   String   @db.Text @default("// Default wrapper")
  problemId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  problem   Problem  @relation(fields: [problemId], references: [id])

  @@unique([problemId, language])
}

model Constraint {
  id        Int     @id @default(autoincrement())
  value     String
  problemId Int
  problem   Problem @relation(fields: [problemId], references: [id])
}

model TestCase {
  id        Int     @id @default(autoincrement())
  input     String
  output    String
  isHidden  Boolean @default(false)
  problemId Int
  problem   Problem @relation(fields: [problemId], references: [id])
}

model Submission {
  id        Int              @id @default(autoincrement())
  code      String
  language  String
  status    SubmissionStatus
  runtime   Int?
  memory    Float?
  createdAt DateTime         @default(now())
  problemId Int
  problem   Problem          @relation(fields: [problemId], references: [id])
}

model Tag {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String?
  problems    ProblemTag[]
}

model ProblemTag {
  problemId Int
  tagId     Int
  problem   Problem @relation(fields: [problemId], references: [id])
  tag       Tag     @relation(fields: [tagId], references: [id])

  @@id([problemId, tagId])
}

model Discussion {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  upvotes   Int      @default(0)
  isPinned  Boolean  @default(false)
  problemId Int
  problem   Problem  @relation(fields: [problemId], references: [id])
}

model Solution {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  upvotes   Int      @default(0)
  language  String?
  problemId Int
  problem   Problem  @relation(fields: [problemId], references: [id])
}

model Examples {
  id          Int     @id @default(autoincrement())
  input       String
  output      String
  explanation String?
  problemId   Int
  Problem     Problem @relation(fields: [problemId], references: [id])
}

enum Language {
  PYTHON
  JAVA
  JAVASCRIPT
  CPP
}

enum Difficulty {
  Easy
  Medium
  Hard
}

enum SubmissionStatus {
  Accepted
  WrongAnswer
  TimeLimitExceeded
  RuntimeError
  CompileError
}
